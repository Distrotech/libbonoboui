<!-- ##### SECTION Title ##### -->
GnomeClientSite

<!-- ##### SECTION Short_Description ##### -->
Container side object embedding server.

<!-- ##### SECTION Long_Description ##### -->
<para>
   The <classname>GnomeClientSite</classname> implements the
   <classname>GNOME::ClientSite</classname> CORBA interface.  It acts
   as the container-side contact for
   <classname>GnomeEmbeddable</classname> objects.
</para>

<para>
   For each object embedded in your application, you should create a
   <classname>GnomeClientSite</classname> object.  
</para>

<para>
   Once you have a handle on a remote object that implements the
   <classname>GNOME::Embeddable</classname> interface (typically
   returned by gnome_object_activate_with_goad_id() or
   gnome_object_activate () or wrapper with
   gnome_object_client_from_corba ()) of type
   <classname>GnomeObjectClient</classname>), you will have to bind
   this object to the <classname>GnomeClientSite</classname> using the
   gnome_client_site_bind_embeddable ().  Once this is done, you will
   be able to request a #GnomeView on the #GnomeClientSite.  
</para>

<para>
   The #GnomeClientSite object also provides access to the remote
   GnomeEmbeddable object's verb list.  
</para>

<example>
   <title>Sample usage</title>

   <para>
      This demostrates the use of the #GnomeClientSite object.  This
      launches the object specified, creates a #GnomeClientSite,
      then requests a new #GnomeViewFrame and finally it returns the
      widget that represents that component.
   </para>
      
   <programlisting>
GtkWidget *
create_widget_from_component (GnomeContainer *container, const char *goad_id)
{
	GnomeObjectClient *server;
	GnomeClientSite   *client_site;
	GnomeViewFrame    *view_frame;

	/*
	 * Launch the requested component
	 */
	server = gnome_object_activate (goad_id, 0);
	if (!server){
		printf ("Could not activate the server");
		return NULL;
	}

	client_site = gnome_client_site_new (app->container);

	/*
	 * Add this client site to the container
	 */
	gnome_container_add (container, GNOME_OBJECT (client_site));

	/*
	 * Bind the component to the client site
	 */
	gnome_client_site_bind_embeddable (client_site, server);

	/*
	 * Create a new GnomeView, and then get a GtkWidget
	 */
	view_frame = gnome_client_site_embeddable_new_view (client_site);

	/*
	 * Get the widget for this view.
	 */

	 return gnome_view_frame_get_wrapper (view_frame);
}

   </programlisting>
</example>
   
<!-- ##### SECTION See_Also ##### -->
<para>
  #GnomeEmbeddable #GnomeContainer #GnomeObjectClient #GnomeViewFrame
</para>

<!-- ##### MACRO GNOME_CLIENT_SITE_TYPE ##### -->
<para>
  Returns the GtkType associated with the
  <classname>GnomeClientSite</classname> object. 
</para>



<!-- ##### FUNCTION gnome_client_site_new ##### -->
<para>

</para>

@container: 
@Returns: 


<!-- ##### FUNCTION gnome_client_site_construct ##### -->
<para>

</para>

@client_site: 
@corba_client_site: 
@container: 
@Returns: 


<!-- ##### FUNCTION gnome_client_site_bind_embeddable ##### -->
<para>

</para>

@client_site: 
@object: 
@Returns: 


<!-- ##### FUNCTION gnome_client_site_new_view ##### -->
<para>

</para>

@client_site: 
@Returns: 


<!-- ##### FUNCTION gnome_client_site_get_verbs ##### -->
<para>

</para>

@client_site: 
@Returns: 


<!-- ##### FUNCTION gnome_client_site_free_verbs ##### -->
<para>

</para>

@string_list: 


<!-- ##### MACRO gnome_client_site_embeddable_new_view ##### -->
<para>

</para>



<!-- ##### MACRO gnome_client_site_embeddable_get_verbs ##### -->
<para>

</para>



<!-- ##### VARIABLE gnome_client_site_epv ##### -->
<para>

</para>


