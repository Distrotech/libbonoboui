<!-- ##### SECTION Title ##### -->
GnomeView

<!-- ##### SECTION Short_Description ##### -->
View object for exporting a view of a GnomeEmbeddable component

<!-- ##### SECTION Long_Description ##### -->
<para>
   #GnomeView objects are typically created on the view factory
   callback of a #GnomeEmbeddable object.  Bonobo components should be
   able to provide as many view objects as requested by the
   #GnomeEmbeddable object on demand.
</para>

<para>
   It is the programmer responsability to keep the contents of all the
   views displaying the same information (modulo per-view state, like
   the zoom factor).
</para>

<para>
   If your component provides menus, then you use the
   gnome_view_set_ui_handler() on your view to provide it with a set
   of menus and toolbars.   You can also retrieve the container's UI
   handler using gnome_view_get_ui_handler().
</para>

<para>
   You can register verbs in the View by using the
   gnome_view_register_verb().  When you want to stop supporting a
   verb, you can use the gnome_view_unregister_verb().  Alternatively,
   you can hook up to the "do_verb" signal and catch the verb requests
   on the signal handler.
</para>

<para>
   #GnomeView objects get a chance to tell their containers their
   desired size by responding to the "size_query" signal.  They will
   get their size assigned later.  The size assignment happens on the
   GtkWidget using the normal Gtk+ size allocation procedure.
</para>

<para>
   If your component supports zooming, connect to the
   "set_zoom_factor" signal.  This signal takes a floating point value
   that indicates the desired zoom factor requested by your container.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
   #GnomeViewFrame #GnomeEmbeddable
</para>

<!-- ##### MACRO GNOME_VIEW_TYPE ##### -->
<para>
   Returns the GtkType associated with the #GnomeView object.
</para>



<!-- ##### USER_FUNCTION GnomeViewVerbFunc ##### -->
<para>

</para>

@view: 
@verb_name: 
@user_data: 


<!-- ##### FUNCTION gnome_view_construct ##### -->
<para>

</para>

@view: 
@corba_view: 
@widget: 
@Returns: 


<!-- ##### FUNCTION gnome_view_new ##### -->
<para>

</para>

@widget: 
@Returns: 


<!-- ##### FUNCTION gnome_view_corba_object_create ##### -->
<para>

</para>

@object: 
@Returns: 


<!-- ##### FUNCTION gnome_view_set_embeddable ##### -->
<para>

</para>

@view: 
@embeddable: 


<!-- ##### FUNCTION gnome_view_get_embeddable ##### -->
<para>

</para>

@view: 
@Returns: 


<!-- ##### FUNCTION gnome_view_set_view_frame ##### -->
<para>

</para>

@view: 
@view_frame: 


<!-- ##### FUNCTION gnome_view_get_view_frame ##### -->
<para>

</para>

@view: 
@Returns: 


<!-- ##### FUNCTION gnome_view_get_ui_handler ##### -->
<para>

</para>

@view: 
@Returns: 


<!-- ##### FUNCTION gnome_view_register_verb ##### -->
<para>

</para>

@view: 
@verb_name: 
@callback: 
@user_data: 


<!-- ##### FUNCTION gnome_view_unregister_verb ##### -->
<para>

</para>

@view: 
@verb_name: 


<!-- ##### SIGNAL GnomeView::view_activate ##### -->
<para>
   Emmited when the activation state for the view is requested to
   change.  The gboolean @activate argument is %TRUE when the View is
   being asked to become active, and %FALSE when it is asked to
   deactivate.
</para>   

@activate:
   
<!-- ##### SIGNAL GnomeView::view_undo_last_operation ##### -->
<para>
   This signal is emitted after the signal view_activate if the
   user has selected the undo operation on the container and the last
   operation done was done by the component.
</para>

<para>
   The code should undo its last operation when it catches this signal.
</para>

<!-- ##### SIGNAL GnomeView::size_query ##### -->
<para>
   This signal is emitted to request the GnomeView to provide its
   desired size.  The arguments @desired_width and @desired_height are
   pointers to integers that must be filled in with the View's desired size.
</para>

@desired_width:
@desired_height:

<!-- ##### SIGNAL GnomeView::do_verb ##### -->
<para>
   This signal is emitted when the container requests the view to
   execute the verb name @verb.  You can install a verb handler if you
   preffer using the gnome_view_register_verb() function.
</para>

@verb:

<!-- ##### SIGNAL GnomeView::set_zoom_factor ##### -->
<para>
   This signal is emitted when the container requests the view to
   set its zoom factor to @zoom.  The view should respond by setting
   its zoom factor to the specified value.
</para>

@zoom:
