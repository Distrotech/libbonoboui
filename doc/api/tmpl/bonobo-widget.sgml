<!-- ##### SECTION Title ##### -->
BonoboWidget

<!-- ##### SECTION Short_Description ##### -->
Simplified embedding of widgets in Bonobo.

<!-- ##### SECTION Long_Description ##### -->
<para>
  Bonobo component embedding for hydrocephalic imbeciles.
</para>

<para>
  Pure cane sugar.
</para>

<para>
  This purpose of BonoboWidget is to make container-side use of Bonobo
  as easy as pie.  This widget has two functions:
  <orderedlist>
    <listitem>
      <para>
        Provide a simple wrapper for embedding a single-view
        subdocument.  In this case, BonoboWidget handles creating the
        embeddable, binding it to a local BonoboClientSite, creating a
        view for it, and displaying the view.  You can use the
        accessor functions (bonobo_widget_get_view_frame, etc) to get
        at the actual Bonobo objects which underlie the whole process.
      </para>

      <para>
        In order to do this, just call:
        <informalexample>
          <programlisting>
	bw = bonobo_widget_new_subdoc ("id of subdoc embeddable", top_level_uihandler);
          </programlisting>
        </informalexample>

        And then insert the 'bw' widget into the widget tree of your application like so:
        <informalexample>
          <programlisting>
	gtk_container_add (some_container, bw);
          </programlisting>
        </informalexample>
      </para>
        
      <para>
        You are free to make the UIContainer argument to
        bonobo_widget_new_subdoc() be CORBA_OBJECT_NIL.
      </para>
    </listitem>

    <listitem>
      <para>
        Provide a simple wrapper for embedding Controls.  Embedding
        controls is already really easy, but BonoboWidget reduces the
        work from about 5 lines to 1.  To embed a given control, just
        do:
        <informalexample>
          <programlisting>
       bw = bonobo_widget_new_control ("id for control");
       gtk_container_add (some_container, bw);
          </programlisting>
        </informalexample>
      </para>
    </listitem>
  </orderedlist>
</para>

<para>
   There are also functions for fetching and setting values in the
   Control PropertyBag, but the use of these functions is
   discouraged. 
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
   Object activation happens with bonobo_get_object().
</para>

<para>
   #BonoboControl, #BonoboControlFrame, #BonoboObject, #BonoboView,
   #BonoboEmbeddable, #BonoboUIContainer, #BonoboItemContainer. 
</para>

<!-- ##### MACRO BONOBO_WIDGET_TYPE ##### -->
<para>

</para>



<!-- ##### MACRO BONOBO_WIDGET ##### -->
<para>

</para>

@o: 


<!-- ##### MACRO BONOBO_WIDGET_CLASS ##### -->
<para>

</para>

@k: 


<!-- ##### MACRO BONOBO_IS_WIDGET ##### -->
<para>

</para>

@o: 


<!-- ##### MACRO BONOBO_IS_WIDGET_CLASS ##### -->
<para>

</para>

@k: 


<!-- ##### STRUCT BonoboWidget ##### -->
<para>

</para>


<!-- ##### TYPEDEF BonoboWidgetClass ##### -->
<para>

</para>


<!-- ##### FUNCTION bonobo_widget_get_server ##### -->
<para>

</para>

@bw: 
@Returns: 


<!-- ##### FUNCTION bonobo_widget_new_control ##### -->
<para>

</para>

@goad_id: 
@uih: 
@Returns: 


<!-- ##### FUNCTION bonobo_widget_new_control_from_objref ##### -->
<para>

</para>

@control: 
@uih: 
@Returns: 


<!-- ##### FUNCTION bonobo_widget_get_control_frame ##### -->
<para>

</para>

@bw: 
@Returns: 


<!-- ##### FUNCTION bonobo_widget_new_subdoc ##### -->
<para>

</para>

@object_desc: 
@uih: 
@Returns: 


<!-- ##### FUNCTION bonobo_widget_get_container ##### -->
<para>

</para>

@bw: 
@Returns: 


<!-- ##### FUNCTION bonobo_widget_get_client_site ##### -->
<para>

</para>

@bw: 
@Returns: 


<!-- ##### FUNCTION bonobo_widget_get_view_frame ##### -->
<para>

</para>

@bw: 
@Returns: 


<!-- ##### FUNCTION bonobo_widget_get_uih ##### -->
<para>

</para>

@bw: 
@Returns: 


<!-- ##### FUNCTION bonobo_widget_set_property ##### -->
<para>

</para>

@control: 
@first_prop: 
@Varargs: 


<!-- ##### FUNCTION bonobo_widget_get_property ##### -->
<para>

</para>

@control: 
@first_prop: 
@Varargs: 


